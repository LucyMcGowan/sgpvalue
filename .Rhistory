plot(theta,
p[[1]],
type = "n",
ylim = c(0, 1),
xlab = "Alternative (SD units)",
ylab = "Probability")
for (i in seq_along(p)) {
lines(theta, p[[i]], lty = 1, lwd = 1, col = i)
}
}
if (truth == "inconclusive") {
p_null <- purrr::map(delta, power_null, n = n, theta = theta)
p_alt <- purrr::map(delta, power_alt, n = n, theta = theta)
p_weak <- p_null - p_alt
par(yaxs = "i")
plot(theta,
p_weak[[1]],
type = "n",
ylim = c(0, length(p_weak)),
xlim = c(-2,2),
xlab = "Alternative (SD units)",
ylab = "Probability",
yaxt = "n")
axis(2,
at = seq(0, length(p_weak), by = .25),
label = c(0, rep(c("", .5, "", 0), length(p_weak))),
las=2)
abline(h = 0, lty = 2, lwd = 0.5)
for (i in seq_along(p_weak)) {
rect(-delta[i],
(length(p_weak) - i + 1),
delta[i],
length(p_weak) - i,
col = rgb(1,0.9,1,0.6),
border = F)
abline(h = i, lty = 2, lwd = 0.5)
lines(theta, p_weak[[i]] + (length(p_weak) - i), lty = 1, lwd = 1, col = i)
text(1.6, length(p_weak) - i + 0.5, bquote(delta~"="~.(delta[i])))
}
}
}
power_curves(n = 33, delta = c(0,1/30,1/2,1), truth = "inconclusive")
power_curves <- function(n, delta = c(0, 0, 0, 0), truth = "null") {
theta <- seq(-3, 3, 0.001)
if (truth == "null") {
p <- purrr::map(delta, power_null, n = n, theta = theta)
plot(theta,
p[[1]],
type = "n",
ylim = c(0, 1),
xlab = "Alternative (SD units)",
ylab="Probability")
for (i in seq_along(p)) {
lines(theta, p[[i]], lty = 1, lwd = 1, col = i)
}
abline(h = 0.05, lwd = 0.5, lty = 2)
}
if (truth == "alternative") {
p <- purrr::map(delta, power_alt, n = n, theta = theta)
plot(theta,
p[[1]],
type = "n",
ylim = c(0, 1),
xlab = "Alternative (SD units)",
ylab = "Probability")
for (i in seq_along(p)) {
lines(theta, p[[i]], lty = 1, lwd = 1, col = i)
}
}
if (truth == "inconclusive") {
p_weak <- purrr::map(delta, power_inconclusive, n = n, theta = theta)
par(yaxs = "i")
plot(theta,
p_weak[[1]],
type = "n",
ylim = c(0, length(p_weak)),
xlim = c(-2,2),
xlab = "Alternative (SD units)",
ylab = "Probability",
yaxt = "n")
axis(2,
at = seq(0, length(p_weak), by = .25),
label = c(0, rep(c("", .5, "", 0), length(p_weak))),
las=2)
abline(h = 0, lty = 2, lwd = 0.5)
for (i in seq_along(p_weak)) {
rect(-delta[i],
(length(p_weak) - i + 1),
delta[i],
length(p_weak) - i,
col = rgb(1,0.9,1,0.6),
border = F)
abline(h = i, lty = 2, lwd = 0.5)
lines(theta, p_weak[[i]] + (length(p_weak) - i), lty = 1, lwd = 1, col = i)
text(1.6, length(p_weak) - i + 0.5, bquote(delta~"="~.(delta[i])))
}
}
}
power_curves(n = 33, delta = c(0,1/30,1/2,1), truth = "inconclusive")
power_inconclusive <- function(delta, n, theta) {
power_null(delta, n, theta) - power_alt(delta, n, theta)
}
power_curves(n = 33, delta = c(0,1/30,1/2,1), truth = "inconclusive")
qnorm(1-alpha/2)
1.96 * sqrt(1 / n)
power_inconclusive(delta = 0.5, n = 33, theta = seq(-3, 3, 0.001))
power_inconclusive(delta = 0.5, n = 33, theta = seq(-3, 3, 0.001)) -> test
test
View(test)
test[300]
test[3000]
power_inconclusive <- function(delta, n, theta) {
1 - power_null(delta, n, theta) - power_alt(delta, n, theta)
}
power_inconclusive(delta = 0.5, n = 33, theta = seq(-3, 3, 0.001)) -> test
power_curves(n = 33, delta = c(0,1/30,1/2,1), truth = "inconclusive")
power_curves <- function(n, delta = c(0, 0, 0, 0), truth = "null") {
theta <- seq(-3, 3, 0.001)
if (truth == "null") {
p <- purrr::map(delta, power_null, n = n, theta = theta)
plot(theta,
p[[1]],
type = "n",
ylim = c(0, 1),
xlab = "Alternative (SD units)",
ylab="Probability")
for (i in seq_along(p)) {
lines(theta, p[[i]], lty = 1, lwd = 1, col = i)
}
abline(h = 0.05, lwd = 0.5, lty = 2)
}
if (truth == "alternative") {
p <- purrr::map(delta, power_alt, n = n, theta = theta)
plot(theta,
p[[1]],
type = "n",
ylim = c(0, 1),
xlab = "Alternative (SD units)",
ylab = "Probability")
for (i in seq_along(p)) {
lines(theta, p[[i]], lty = 1, lwd = 1, col = i)
}
}
if (truth == "inconclusive") {
p_weak <- purrr::map(delta, power_inconclusive, n = n, theta = theta)
par(yaxs = "i")
plot(theta,
p_weak[[1]],
type = "n",
ylim = c(0, length(p_weak)),
xlim = c(-2,2),
xlab = "Alternative (SD units)",
ylab = "Probability",
yaxt = "n")
axis(2,
at = seq(0, length(p_weak), by = .25),
label = c(0, rep(c("", .5, "", 0), length(p_weak))),
las=2)
abline(h = 0, lty = 2, lwd = 0.5)
for (i in seq_along(p_weak)) {
rect(-delta[i],
(length(p_weak) - i + 1),
delta[i],
length(p_weak) - i,
col = rgb(1,0.9,1,0.6),
border = F)
abline(h = i, lty = 2, lwd = 0.5)
lines(theta, p_weak[[i]] + (length(p_weak) - i), lty = 1, lwd = 1, col = i)
text(1.6, length(p_weak) - i + 0.5, bquote(delta~"="~.(round(delta[i], 2))))
}
}
}
power_curves(n = 33, delta = c(0,1/30,1/2,1), truth = "inconclusive")
abline(h=0.05,lty=2)
devtools::load_all()
power_curves(n = 10, delta = 1, truth = "!")
power_curves(n = 10, delta = 1, truth = "!")
power_curves(n = 10, delta = 1, truth = "inconclusive")
power_curves(n = 10, delta = c(1, 2, 3), truth = "inconclusive")
power_curves(n = 10, delta = c(1, 2, 3), truth = "alternative")
power_curves(n = 10, delta = c(1, 2, 3, 6), truth = "alternative")
devtools::load_all()
power_curves(n = 10, delta = c(1, 2, 3, 6), truth = "alternative")
power_curves(n = 10, delta = c(1, 2, 3, 6), truth = "alternative")
devtools::load_all()
power_curves(n = 10, delta = c(1, 2, 3, 6), truth = "alternative")
power_curves(n = 10, delta = c(1, 2, 3, 4), truth = "alternative")
power_curves(n = 10, delta = c(1, 2, 3, 3.4), truth = "alternative")
devtools::load_all()
power_curves(n = 10, delta = c(1, 2, 3, 3.4), truth = "alternative")
power_curves(n = 10, delta = c(1, 2, 3, 3.4), truth = "null")
power_curves(n = 10, delta = c(0, 1/30, 1,4), truth = "null")
power_curves(n = 10, delta = c(0, 1/30, 0.5, 1), truth = "null")
devtools::load_all()
power_curves(n = 10, delta = c(0, 1/30, 0.5, 1), truth = "null")
power_curves(n = 10, delta = c(0, 1/30, 0.5, 1), truth = "alternative")
devtools::load_all()
power_curves(n = 10, delta = c(0, 1/30, 0.5, 1), truth = "alternative")
power_curves(n = 10, delta = c(0, 1/30, 0.5, 1), truth = "alternative")
power_curves(n = 10, delta = c(0, 1/30, 0.5, 1), truth = "alternative")
power_curves(n = 10, delta = c(0, 1/30, 0.5, 1), truth = "inconclusive")
devtools::load_all()
power_curves(n = 10, delta = c(0, 1/30, 0.5, 1), truth = "inconclusive")
power_curves(n = 10, delta = c(0, 1/30, 0.5, 1), truth = "alternative")
devtools::load_all()
power_curves(n = 10, delta = c(0, 1/30, 0.5, 1), truth = "alternative")
power_curves(n = 10, delta = c(0, 1/30, 0.5, 1), truth = "inconclusive")
power_curves(n = 30, delta = c(0, 1/30, 0.5, 1), truth = "alternative")
power_curves(n = 33, delta = c(0, 1/30, 0.5, 1), truth = "alternative")
power_curves(n = 33, delta = c(0, 1/30, 0.5, 1), truth = "inconclusive")
devtools::load_all()
power_curves(n = 33, delta = c(0, 1/30, 0.5, 1), truth = "inconclusive")
power_curves(n = 33, delta = c(0, 1/30, 0.5, 1), truth = "alternative")
power_curves(n = 33, delta = c(0, 1/30, 0.5, 6), truth = "alternative")
power_curves(n = 33, delta = c(0, 1/30, 0.5, 6), truth = "null")
power_curves(n = 33, delta = c(0, 1/30, 0.5, 6), truth = "inconclusive")
devtools::load_all()
devtools::document()
?power_curves
devtools::document()
?power_curves
devtools::document()
?power_curves
power_curves(n = 200, delta = c(0, 1/30, 0.5, 1), truth = "null")
power_curves(n = 100, delta = c(0, 1/30, 0.5, 1), truth = "null")
power_curves(n = 30, delta = c(0, 1/30, 0.5, 1), truth = "null")
power_curves(n = 10, delta = c(0, 1/30, 0.5, 1), truth = "null")
power_curves(n = 10, delta = c(0, 1/30, 0.5, 1), truth = "null")
power_curves(n = 200, delta = c(0, 1/30, 1/2, 1), truth = "inconclusive)
``
""
"
power_curves(n = 200, delta = c(0, 1/30, 1/2, 1), truth = "inconclusive")
devtools::document()
devtools::document()
?power_curves
devtools::use_readme_rmd()
p_delta(lb = 145, ub = 148, delta_a = 147, delta_b = 149)
data <- data.frame(
xbar = c(146, 145.5, 145, 146, 144, 143.5, 142, 141),
se = c(0.5, 0.25, 1.25, 2.25, 1, 0.5, 1, 0.5)
)
compare_p(data, delta_a = 144, delta_b = 148, h0 = 146)
library(sgpvalue)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("n",
"N",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
power_curves(n = input$n, delta = input$delta, truth = "null")
})
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("n",
"N",
min = 1,
max = 50,
value = 30)
),
sliderInput("delta",
"delta",
min = 0.01,
max = 3,
value = 0.4),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
power_curves(n = input$n, delta = input$delta, truth = "null")
})
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("n",
"N",
min = 1,
max = 50,
value = 30),
sliderInput("delta",
"delta",
min = 0.01,
max = 3,
value = 0.4)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
power_curves(n = input$n, delta = input$delta, truth = "null")
})
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
numericInput("n",
"N",
value = 30),
sliderInput("delta",
"delta",
min = 0,
max = 3,
value = 0.4)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
power_curves(n = input$n, delta = input$delta, truth = "null")
})
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
numericInput("n",
"N",
value = 30),
sliderInput("delta",
"delta",
min = 0,
max = 3,
value = 0.4)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("null_plot"),
plotOutput("alt_plot"),
plotOutput("inc_plot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$null_plot <- renderPlot({
power_curves(n = input$n, delta = input$delta, truth = "null")
title("Null")
})
output$alt_plot <- renderPlot({
power_curves(n = input$n, delta = input$delta, truth = "alternative")
title("Alternative")
})
output$inc_plot <- renderPlot({
power_curves(n = input$n, delta = input$delta, truth = "inconclusive")
title("Inconclusive")
})
}
# Run the application
shinyApp(ui = ui, server = server)
?sliderInput
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
numericInput("n",
"N",
value = 30),
sliderInput("delta",
"delta",
min = 0,
max = 3,
step = 0.01,
value = 0.4)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("null_plot"),
plotOutput("alt_plot"),
plotOutput("inc_plot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$null_plot <- renderPlot({
power_curves(n = input$n, delta = input$delta, truth = "null")
title("Null")
})
output$alt_plot <- renderPlot({
power_curves(n = input$n, delta = input$delta, truth = "alternative")
title("Alternative")
})
output$inc_plot <- renderPlot({
power_curves(n = input$n, delta = input$delta, truth = "inconclusive")
title("Inconclusive")
})
}
# Run the application
shinyApp(ui = ui, server = server)
devtools::use_github()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
